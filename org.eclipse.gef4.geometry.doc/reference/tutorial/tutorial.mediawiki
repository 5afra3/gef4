== Description ==

This is a small tutorial for the GEF4 Geometry API.

== 1. Class hierarchy ==

The GEF 4 Geometry API is based on a skeleton of interfaces and implementation categories which classify the individual figures into groups according to their dimensionality and multiplicity (interface hierarchy) and their construction method (inheritance hierarchy) as follows:




== 2. General behaviour ==

You can find all the figures in the [[GEF/GEF4/Geometry#Planar | org.eclipse.gef4.geometry.planar]] package. In the majority of cases, you will get along with those predeclared figures. If you feel the need of another one that is not provided there, you can draw the joker ([[GEF/GEF4/Geometry#Path |Path]]) which can be used to work with complicated composed shapes and curves. But we will begin by demonstrating the other classes first.

=== Object construction ===

The constructor methods of the curves and shapes are overloaded to provide either raw data to create the object from:

    Point p1 = new Point(100, 100);
    Point p2 = new Point(200, 200);
    Line line = new Line(100, 100, 200, 200);

Or to create it from existing curves/shapes:

    Line line = new Line(p1, p2);

Each shape can bake a copy of its own via its <code>getCopy()</code> method.

    Line line2 = line.getCopy();

=== Transformations ===

If you want to transform a shape, there are several ways to do this. You may use...

* ...the general [[GEF/GEF4/Geometry#AffineTransform |AffineTransform]] class using the <code>shape.getTransformed(transformation)</code> method
* ...short-cut methods for the individual transformations

You can easily rotate a [[GEF/GEF4/Geometry#Rectangle |Rectangle]] by calling its <code>getRotatedCCW(angle)</code> method:

    Rectangle quad = new Rectangle(100, 100, 100, 100);
    Polygon rhomb = quad.getRotatedCCW(Angle.fromDeg(45));

As you can see, the resulting shape is not a [[GEF/GEF4/Geometry#Rectangle |Rectangle]] anymore. This is due to the fact, that [[GEF/GEF4/Geometry#Rectangle |Rectangles]] are always parallel to the x- and y-axis.

If you want to rotate a Rectangle by an integer multiple of 90Â° and get a [[GEF/GEF4/Geometry#Rectangle |Rectangle]] back, you have to use the <code>polygon.getBounds()</code> method on the [[GEF/GEF4/Geometry#Polygon |Polygon]] that the <code>getRotatedCCW(angle)</code> method returns:

    Rectangle rect = new Rectangle(100, 100, 200, 50);
    Rectangle rotated = rect.getRotatedCCW(Angle.fromDeg(90)).getBounds();

You may wonder why the rotation method is called <code>getRotatedCCW()</code> and not just <code>getRotated()</code>. This is to assure, that the direction of rotation is correct. The postfix indicates whether you want to rotate counter-clock-wise (CCW) or clock-wise (CW). Another small assistance is the [[GEF/GEF4/Geometry#Angle |Angle]] class. It prevents you from mixing up degrees and radians in rotation calculations.

Translation and scaling are directly available on each form, too:

    Rectangle rect = new Rectangle(100, 100, 200, 50);
    Rectangle big = rect.getScaled(2);
    Rectangle small = rect.getScaled(0.5);
    Rectangle translated = rect.getTranslated(-50, 50);
    //...

Rotation and scaling do always use a relative point to rotate around and scale away from, respectively. If you omit it, the transformation will use the mid-point of the [[GEF/GEF4/Geometry#IGeometry| IGeometry]] as the relative point for the transformation. This behavior is considered to be least surprising, although some people might expect the scaling and the rotation to be relative to (0, 0) which is the default behavior for Points and Vectors.

=== Interaction of geometric objects ===

Curves and shapes can interact with each other. You can test them for intersection or overlap, and you can compute the points of intersection of two curves/shapes and the overlapping section of two curves/shapes.

To do so, the [[GEF/GEF4/Geometry#ICurve| ICurve]] and [[GEF/GEF4/Geometry#IShape| IShape]] interfaces provide various methods, namely touches(), contains(), overlaps(), getIntersections() and getOverlap() which return information on the relationship of two shapes.

For example, you may wish to compute the points of intersection between and ellipse an a line:

    Point[] intersections = ellipse.getIntersections(line);

Or you are dealing with two overlapping curves and you want to get the overlap:

    CubicCurve overlap = c1.getOverlap(c2);

=== Regions ===

TODO... delegates to the AWT functionality.
